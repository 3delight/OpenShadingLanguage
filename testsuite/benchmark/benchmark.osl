shader
benchmark (string op = "error",
           int repeat = 10000, 
           output color Cout = 0)
{
    if (op == "error") {
        exit();
    }

    matrix m = matrix(u,0,0,0,
             0,v,0,0,
             0,0,1,0,
             0,0,0,1);

    vector xvecknots[13];
    
    xvecknots[ 0] =  0.0;
    xvecknots[ 1] =  0.0;
    xvecknots[ 2] =  1.0;
    xvecknots[ 3] =  1.0;
    xvecknots[ 4] =  1.0;
    xvecknots[ 5] =  0.5;
    xvecknots[ 6] =  0.5;
    xvecknots[ 7] =  0.5;
    xvecknots[ 8] =  1.0;
    xvecknots[ 9] =  1.0;
    xvecknots[10] =  1.0;
    xvecknots[11] =  0.0;
    xvecknots[12] =  0.0;
            

    for (int i = 0; i < repeat; ++i) {
        if (op == "null") {
        }
        if (op == "sin") {
            Cout = color(sin(P[0]), sin(P[1]), sin(P[2]));
        }
        if (op == "cos") {
            Cout = color(cos(P[0]), cos(P[1]), cos(P[2]));
        }
        if (op == "tan") {
            Cout = color(tan(P[0]), tan(P[1]), tan(P[2]));
        }
        if (op == "sinh") {
            Cout = color(sinh(P[0]), sinh(P[1]), sinh(P[2]));
        }
        if (op == "cosh") {
            Cout = color(cosh(P[0]), cosh(P[1]), cosh(P[2]));
        }
        if (op == "tanh") {
            Cout = color(tanh(P[0]), tanh(P[1]), tanh(P[2]));
        }
        if (op == "asin") {
            Cout = color(asin(P[0]), asin(P[1]), asin(P[2]));
        }
        if (op == "acos") {
            Cout = color(acos(P[0]), acos(P[1]), acos(P[2]));
        }
        if (op == "atan") {
            Cout = color(atan(P[0]), atan(P[1]), atan(P[2]));
        }
        if (op == "atan2") {
            Cout = color(atan2(P[0],P[1]), atan2(P[1],P[0]), atan2(P[2],P[1]));
        }
        if (op == "sincos") {
            float sinX;
            float cosX;
            sincos(P[0], sinX, cosX);
            Cout[0] = sinX;
            Cout[1] = cosX;
        }
        if (op == "log") {
            Cout = color(log(P[0]), log(P[1]), log(P[2]));
        }
        if (op == "log2") {
            Cout = color(log2(P[0]), log2(P[1]), log2(P[2]));
        }
        if (op == "log10") {
            Cout = color(log10(P[0]), log10(P[1]), log10(P[2]));
        }
        if (op == "logb") {
            Cout = color(logb(P[0]), logb(P[1]), logb(P[2]));
        }
        if (op == "exp") {
            Cout = color(exp(P[0]), exp(P[1]), exp(P[2]));
        }
        if (op == "exp2") {
            Cout = color(exp2(P[0]), exp2(P[1]), exp2(P[2]));
        }
        if (op == "expm1") {
            Cout = color(expm1(P[0]), expm1(P[1]), expm1(P[2]));
        }
        if (op == "pow") {
            Cout = color(pow(P[1],P[0]), pow(P[0],P[1]), pow(P[2],P[0]));
        }
        if (op == "erf") {
            Cout = color(erf(P[0]), erf(P[1]), erf(P[2]));
        }
        if (op == "erfc") {
            Cout = color(erfc(P[0]), erfc(P[1]), erfc(P[2]));
        }        
        if (op == "radians") {
            Cout = color(radians(P[0]), radians(P[1]), radians(P[2]));
        }        
        if (op == "degrees") {
            Cout = color(degrees(P[0]), degrees(P[1]), degrees(P[2]));
        }        
        if (op == "sqrt") {
            Cout = color(sqrt(P[0]), sqrt(P[1]), sqrt(P[2]));
        }        
        if (op == "inversesqrt") {
            Cout = color(inversesqrt(P[0]), inversesqrt(P[1]), inversesqrt(P[2]));
        }        
        if (op == "hypot") {
            Cout = color(hypot(P[0],P[1]), hypot(P[1],P[0]), hypot(P[2],P[1]));
        }        
        if (op == "abs") {
            Cout = color(abs(P[0]), abs(P[1]), abs(P[2]));
        }        
        if (op == "fabs") {
            Cout = color(fabs(P[0]), fabs(P[1]), fabs(P[2]));
        }        
        if (op == "sign") {
            Cout = color(sign(P[0]), sign(P[1]), sign(P[2]));
        }        
        if (op == "floor") {
            Cout = color(floor(P[0]), floor(P[1]), floor(P[2]));
        }        
        if (op == "ceil") {
            Cout = color(ceil(P[0]), ceil(P[1]), ceil(P[2]));
        }        
        if (op == "round") {
            Cout = color(round(P[0]), round(P[1]), round(P[2]));
        }        
        if (op == "trunc") {
            Cout = color(trunc(P[0]), trunc(P[1]), trunc(P[2]));
        }  
        if (op == "mod") {
            Cout = color(mod(P[0],P[1]), mod(P[1],P[0]), mod(P[2],P[1]));
        }        
        if (op == "fmod") {
            Cout = color(fmod(P[0],P[1]), fmod(P[1],P[0]), fmod(P[2],P[1]));
        }        
        if (op == "min") {
            Cout = color(min(P[0],P[1]), min(P[1],P[0]), min(P[2],P[1]));
        }        
        if (op == "max") {
            Cout = color(max(P[0],P[1]), max(P[1],P[0]), max(P[2],P[1]));
        }        
        if (op == "clamp") {
            Cout = color(clamp(P[0],P[1],P[2]), clamp(P[2],P[1],P[0]), clamp(P[2],P[1],P[0]));
        }        
        if (op == "mix") {
            Cout = color(mix(P[0],P[1],P[2]), mix(P[2],P[1],P[0]), mix(P[2],P[1],P[0]));
        }        
        if (op == "isnan") {
            Cout = color(isnan(P[0]), isnan(P[1]), isnan(P[2]));
        }        
        if (op == "isinf") {
            Cout = color(isinf(P[0]), isinf(P[1]), isinf(P[2]));
        }        
        if (op == "isfinite") {
            Cout = color(isfinite(P[0]), isfinite(P[1]), isfinite(P[2]));
        }        
        if (op == "select") {
            Cout = color(select(P[0],P[1],P[2]), select(P[2],P[1],P[0]), select(P[2],P[1],P[0]));
        }        
        if (op == "dot") {
            Cout = dot(P,N);
        }        
        if (op == "cross") {
            Cout = cross(P,N);
        }        
        if (op == "length") {
            Cout = length(P);
        }        
        if (op == "distance") {
            Cout = distance(P,N);
        }        
        if (op == "normalize") {
            Cout = normalize(P);
        }        
        if (op == "reflect") {
            Cout = reflect(P, N);
        }        
        if (op == "refract") {
            Cout = refract(P, N, 0.5);
        }        
        if (op == "fresnel") {
            float Kr;
            float Kt;
            vector R;
            vector T;
            fresnel (I, N, 0.5, Kr, Kt, R, T);
            Cout = (R + T) + Kr + Kt;
        }              
        if (op == "rotate") {
            Cout = rotate(P, u, point(0,0,0), point(v,v,v));
        }        
        if (op == "transform") {
            Cout = transform("object",P);
        }        
        if (op == "transform_matrix") {
            Cout = transform(m,P);
        }        
        if (op == "matrix_object_camera") {
            matrix moc = matrix("object","camera");
            Cout = color(moc[3][0], moc[3][1], moc[3][2]);
        }                
        if (op == "determinant") {
            Cout = determinant(m);
        }        
        if (op == "transpose") {
            matrix tm = transpose(m);
            Cout = color(tm[3][0], tm[3][1], tm[3][2]);
        }                
        if (op == "step") {
            Cout = color(step(0.5,u),step(0.5,v), step(0.2,u));
        }                
        if (op == "linearstep") {
            Cout = color(linearstep(1.0, 0, u),linearstep(1.0, 0, v), linearstep(0, 0.5, u));
        }                
        if (op == "smoothstep") {
            Cout = color(smoothstep(1.0, 0, u),smoothstep(1.0, 0, v), smoothstep(0, 0.5, u));
        }                
        if (op == "smooth_linearstep") {
            Cout = color(smooth_linearstep(1.0, 0, u, 0.1), smooth_linearstep(1.0, 0, v, 0.2), smooth_linearstep(0, 0.5, u, 0.3));
        }                
        if (op == "noise_perlin") {
        
            Cout = noise("perlin", P);
        }        
        if (op == "noise_cell") {
            Cout = noise("cell", P);
        }        
        if (op == "noise_simplex") {
            Cout = noise("simplex", P);
        }        
        if (op == "noise_gabor") {
            Cout = noise("gabor", P);
        }        
        if (op == "pnoise_perlin") {
        
            Cout = pnoise("perlin", P, v);
        }        
        if (op == "pnoise_cell") {
            Cout = pnoise("cell", P, v);
        }        
        if (op == "pnoise_gabor") {
            Cout = pnoise("gabor", P, v);
        }        
        if (op == "spline_bezier") {
            Cout   = spline("bezier", P[0], xvecknots);
        }        
        if (op == "spline_bspline") {
            Cout   = spline("bspline", P[0], xvecknots);
        }        
        if (op == "spline_catmull-rom") {
            Cout   = spline("catmull-rom", P[0], xvecknots);
        }        
        if (op == "spline_hermite") {
            Cout   = spline("hermite", P[0], xvecknots);
        }        
        if (op == "spline_linear") {
            Cout   = spline("linear", P[0], xvecknots);
        }        
        if (op == "spline_constant") {
            Cout   = spline("constant", P[0], xvecknots);
        }        
        
    }
}
