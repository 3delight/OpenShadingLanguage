
//Batched:
// testshade --llvm_debug --batched -g 1024 1024 -t 1 --stats -od uint8 -o Fspline bezier_out.tif test_bezier_f_f_f | grep osl




shader test_bspline_f_f_f (output float Fspline = 0)
{

   float fltknots[13];
#if 0
   fltknots[ 0] =  0.0 * u;
   fltknots[ 1] =  0.0 * u;
   fltknots[ 2] =  1.0 * u;
   fltknots[ 3] =  1.0 * u;
   fltknots[ 4] =  1.0 * u;
   fltknots[ 5] =  0.5 * u;
   fltknots[ 6] =  0.5 * u;
   fltknots[ 7] =  0.5 * u;
   fltknots[ 8] =  1.0 * u;
   fltknots[ 9] =  1.0 * u;
   fltknots[10] =  1.0 * u;
   fltknots[11] =  0.0 * u;
   fltknots[12] =  0.0 * u ;
#endif

#if 0


   fltknots[ 0] =  0.0 * u;
   fltknots[ 1] =  1/12.0 * u;
   fltknots[ 2] =  2/12.0 * u;
   fltknots[ 3] =  3/12.0 * u;
   fltknots[ 4] =  4/12.0 * u;
   fltknots[ 5] =  5/12.0 * u;
   fltknots[ 6] =  6/12.0 * u;
   fltknots[ 7] =  7/12.0 * u;
   fltknots[ 8] =  8/12.0 * u;
   fltknots[ 9] =  9/12.0 * u;
   fltknots[10] =  10/12.0 * u;
   fltknots[11] =  11/12.0 * u;
   fltknots[12] =  12/12.0 * u;
#endif

   fltknots[ 0] =  (0.0/12.0)* u;
   fltknots[ 1] =  (1.0/12.0)* u;
   fltknots[ 2] =  (2.0/12.0)* u;
   fltknots[ 3] =  (3.0/12.0)* u;
   fltknots[ 4] =  (4.0/12.0)* u;
   fltknots[ 5] =  (5.0/12.0)* u;
   fltknots[ 6] =  (6.0/12.0)* u;
   fltknots[ 7] =  (7.0/12.0)* u;
   fltknots[ 8] =  (8.0/12.0)* u;
   fltknots[ 9] =  (9.0/12.0)* u;
   fltknots[10] =  (10.0/12.0)* u;
   fltknots[11] =  (11.0/12.0)* u;
   fltknots[12] =  (12.0/12.0)* u;

if(int(P[0]*1024)%2){
Fspline = splineinverse ("bspline", 0.5, fltknots);//osl_splineinverse_w16fw16ff_masked
}


}


