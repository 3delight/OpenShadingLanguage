shader test_hermite_dv_f_dv (
	output vector Fspline1 = 0, 
	output vector DxFspline1 = 0)
{

 //testshade --batched --llvm_debug -g 4 4 -t 1 --iters 1 --stats -od uint8 -o Fspline1 a_ref.tif -o DxFspline1 b_ref.tif test_bezier_dv_f_dv | grep osl  
//Supposed to hit  osl_spline_w16dv_w16f_w16dv
 
   vector vecknots[13];

   vector vecknots_u[13];

   vector vecknots_t[13];

color colknots[16];

for (int i = 0; i < 16; ++i){
        //colknots[i] = color (i/3, i/3, i/3);
         colknots[i] = color(1.0e9, 1.0e9, 1.0e9);
 }

 #if 0 

   vecknots[0] = 0.0;
   vecknots[1] = 0.0;
   vecknots[2] = 1.0;
   vecknots[3] = 1.0;
   vecknots[4] = 1.0;
   vecknots[5] = 0.5;
   vecknots[6] = 0.5;
   vecknots[7] = 0.5;
   vecknots[8] = 1.0;
   vecknots[9] = 1.0;
   vecknots[10] = 1.0;
   vecknots[11] = 0.0;
   vecknots[12] = 0.0;
#endif


   vecknots_u[0] = vector(0.0, 0.0, 0.0)*u ;
   vecknots_u[1] = vector(0.0, 0.0, 0.0)*u ;
   vecknots_u[2] = vector(1.0, 1.0, 1.0)*u ;
   vecknots_u[3] = vector(1.0, 1.0, 1.0)*u ;
   vecknots_u[4] = vector(1.0, 1.0, 1.0)*u ;
   vecknots_u[5] = vector(0.5, 0.5, 0.5)*u ;
   vecknots_u[6] = vector(0.5, 0.5, 0.5)*u ;
   vecknots_u[7] = vector(0.5, 0.5, 0.5)*u ;
   vecknots_u[8] = vector(1.0, 1.0, 1.0)*u ;
   vecknots_u[9] = vector(1.0, 1.0, 1.0)*u ;
   vecknots_u[10] = vector (1.0, 1.0, 1.0)*u ;
   vecknots_u[11] = vector(0.0, 0.0, 0.0)*u ;
   vecknots_u[12] = vector(0.0, 0.0, 0.0)*u ;


#if 0

   vecknots[0] = vector(0.0, 0.0, 0.0) ;
   vecknots[1] = vector(0.0, 0.0, 0.0) ;
   vecknots[2] = vector(1.0, 1.0, 1.0) ;
   vecknots[3] = vector(1.0, 1.0, 1.0) ;
   vecknots[4] = vector(1.0, 1.0, 1.0) ;
   vecknots[5] = vector(0.5, 0.5, 0.5) ;
   vecknots[6] = vector(0.5, 0.5, 0.5) ;
   vecknots[7] = vector(0.5, 0.5, 0.5) ;
   vecknots[8] = vector(1.0, 1.0, 1.0) ;
   vecknots[9] = vector(1.0, 1.0, 1.0) ;
   vecknots[10] = vector (1.0, 1.0, 1.0) ;
   vecknots[11] = vector(0.0, 0.0, 0.0) ;
   vecknots[12] = vector(0.0, 0.0, 0.0) ;

#endif 



   vecknots_t[0] = vector(0.0, 0.0, 0.0) * time;
   vecknots_t[1] = vector(0.0, 0.0, 0.0) * time ;
   vecknots_t[2] = vector(1.0, 1.0, 1.0) * time ;
   vecknots_t[3] = vector(1.0, 1.0, 1.0) * time ;
   vecknots_t[4] = vector(1.0, 1.0, 1.0) * time ;
   vecknots_t[5] = vector(0.5, 0.5, 0.5) * time ;
   vecknots_t[6] = vector(0.5, 0.5, 0.5) * time ;
   vecknots_t[7] = vector(0.5, 0.5, 0.5) * time ;
   vecknots_t[8] = vector(1.0, 1.0, 1.0) * time ;
   vecknots_t[9] = vector(1.0, 1.0, 1.0) * time ;
   vecknots_t[10] = vector (1.0, 1.0, 1.0) * time ;
   vecknots_t[11] = vector(0.0, 0.0, 0.0)* time ;
   vecknots_t[12] = vector(0.0, 0.0, 0.0)* time ;

   
  //Fspline1   = spline("bezier", 0.1, vecknots); //osl_spline_w16dvfw16dv
//  Fspline1   = spline("bezier", time, vecknots); //I need osl_spline_w16dv_w16f_dv. This gets into @osl_spline_w16vw16fv_masked.

 // Fspline1   = spline("bezier", 0.1, vecknots);  //osl_spline_w16vfv_masked

//Fspline1 = spline("bezier", 0.1, vecknots_u); //@osl_spline_w16dvfw16dv_masked

//Fspline1 = spline("bezier", time, vecknots_u); //osl_spline_w16dvw16fw16dv_masked

Fspline1 = spline("bezier", time, vecknots_t); //_w16dvw16fw16dv_masked

Fspline1 = spline("hermite", time, colknots);

//  printf(Fspline1);
   
  DxFspline1 = Dx(Fspline1);

}
