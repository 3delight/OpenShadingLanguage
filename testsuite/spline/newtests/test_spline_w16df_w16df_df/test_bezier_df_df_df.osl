shader test_bezier_df_df_df (
	
	output float Fspline1 = 0, 
	output float DxFspline1 = 0)
{

//Non-batched: osl_spline_w16dfw16dfdf
//Batched: Couldn't find function osl_spline_w16dfw16dfw16df 	
// testshade -g 400 400 -t 1 --iters 1 --stats -o Fspline1 a.tif -o DxFspline1 b.tif test_bezier_df_df_df | grep osl
   

   float fltknots[13];
   color colknots[13];
 

   fltknots[ 0] =  time;
   fltknots[ 1] =  time;
   fltknots[ 2] =  time;
   fltknots[ 3] =  time;
   fltknots[ 4] =  time;
   fltknots[ 5] =  time;
   fltknots[ 6] =  time;
   fltknots[ 7] =  time;
   fltknots[ 8] =  time;
   fltknots[ 9] =  time;
   fltknots[10] =  time;
   fltknots[11] =  time;
   fltknots[12] =  time;

	//for(int ki=0; ki < 13; ++ki) {
	//	printf("%g Dx=%g\n",fltknots[ki],Dx(fltknots[ki]));
	//}

#if 0

   fltknots[ 0] =  0.0 ;
   fltknots[ 1] =  0.0 ;
   fltknots[ 2] =  1.0 ;
   fltknots[ 3] =  1.0 ;
   fltknots[ 4] =  1.0 ;
   fltknots[ 5] =  0.5 ;
   fltknots[ 6] =  0.5 ;
   fltknots[ 7] =  0.5 ;
   fltknots[ 8] =  1.0 ;
   fltknots[ 9] =  1.0 ;
   fltknots[10] =  1.0 ;
   fltknots[11] =  0.0 ;
   fltknots[12] =  0.0 ;

#endif
   colknots[ 0] =  0.0;
   colknots[ 1] =  0.0;
   colknots[ 2] =  1.0;
   colknots[ 3] =  1.0;
   colknots[ 4] =  1.0;
   colknots[ 5] =  0.5;
   colknots[ 6] =  0.5;
   colknots[ 7] =  0.5;
   colknots[ 8] =  1.0;
   colknots[ 9] =  1.0;
   colknots[10] =  1.0;
   colknots[11] =  0.0;
   colknots[12] =  0.0;


if (P[0]>0.5){
  Fspline1   = spline("bezier", P[0], fltknots);
  //DxFspline1 = 100.0*Dx(Fspline1);
   DxFspline1 = Dx(Fspline1);
}


}
