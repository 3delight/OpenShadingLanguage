shader test_spline (
	string splinename="spline",
	output float Fspline1 = 0, 
	output float DxFspline1 = 0,

	output float mFspline1=0,
	output float mDxFspline1=0)
{

   float fltknots[13];
   color colknots[13];
 

   fltknots[ 0] =  0.0 * u;
   fltknots[ 1] =  0.0 * u;
   fltknots[ 2] =  1.0 * u;
   fltknots[ 3] =  1.0 * u;
   fltknots[ 4] =  1.0 * u;
   fltknots[ 5] =  0.5 * u;
   fltknots[ 6] =  0.5 * u;
   fltknots[ 7] =  0.5 * u;
   fltknots[ 8] =  1.0 * u;
   fltknots[ 9] =  1.0 * u;
   fltknots[10] =  1.0 * u;
   fltknots[11] =  0.0 * u;
   fltknots[12] =  0.0 * u;

	//for(int ki=0; ki < 13; ++ki) {
	//	printf("%g Dx=%g\n",fltknots[ki],Dx(fltknots[ki]));
	//}
#if 0

   fltknots[ 0] =  0.0 ;
   fltknots[ 1] =  0.0 ;
   fltknots[ 2] =  1.0 ;
   fltknots[ 3] =  1.0 ;
   fltknots[ 4] =  1.0 ;
   fltknots[ 5] =  0.5 ;
   fltknots[ 6] =  0.5 ;
   fltknots[ 7] =  0.5 ;
   fltknots[ 8] =  1.0 ;
   fltknots[ 9] =  1.0 ;
   fltknots[10] =  1.0 ;
   fltknots[11] =  0.0 ;
   fltknots[12] =  0.0 ;
#endif

   colknots[ 0] =  0.0;
   colknots[ 1] =  0.0;
   colknots[ 2] =  1.0;
   colknots[ 3] =  1.0;
   colknots[ 4] =  1.0;
   colknots[ 5] =  0.5;
   colknots[ 6] =  0.5;
   colknots[ 7] =  0.5;
   colknots[ 8] =  1.0;
   colknots[ 9] =  1.0;
   colknots[10] =  1.0;
   colknots[11] =  0.0;
   colknots[12] =  0.0;

  Fspline1   = spline(splinename, P[0], fltknots);
  DxFspline1 = Dx(Fspline1);

if (P[0]>0.5){
  mFspline1   = spline(splinename, P[0], fltknots);
  mDxFspline1 = Dx(mFspline1);
}


}
